// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using MonoTouch.UIKit;
using TicTacToe.Portable;

namespace TicTacToe.iOS {
  public partial class GameViewController : UIViewController {
    private readonly List<CellPosition> _cellIndexes = new List<CellPosition>();
    private readonly UIButton[,] _gameCellButtons = new UIButton[3, 3];
    private TicTacToeGame _game;

    public GameViewController(IntPtr handle)
      : base(handle) {}

    public override void ViewDidLoad() {
      base.ViewDidLoad();

      BackButton.TouchUpInside += (sender, e) => NavigationController.PopViewControllerAnimated(true);
      NewGameButton.TouchUpInside += (sender, args) => NewGame();

      _gameCellButtons[0, 0] = Button1;
      _gameCellButtons[0, 1] = Button2;
      _gameCellButtons[0, 2] = Button3;
      _gameCellButtons[1, 0] = Button4;
      _gameCellButtons[1, 1] = Button5;
      _gameCellButtons[1, 2] = Button6;
      _gameCellButtons[2, 0] = Button7;
      _gameCellButtons[2, 1] = Button8;
      _gameCellButtons[2, 2] = Button9;

      for (int i = 0; i < TicTacToeGame.BoardSize; ++i) {
        for (int j = 0; j < TicTacToeGame.BoardSize; ++j) {
          _gameCellButtons[i, j].Tag = _cellIndexes.Count;
          _cellIndexes.Add(new CellPosition {Row = i, Column = j});
          _gameCellButtons[i, j].TouchUpInside += OnGameCellPressed;
        }
      }

      NewGame();
    }

    private void OnGameCellPressed(object sender, EventArgs eventArgs) {
      var senderButton = sender as UIButton;
      if (senderButton == null) {
        return;
      }

      var cellPosition = _cellIndexes[senderButton.Tag];

      var updatedBoardState = _game.NewMoveMade(cellPosition.Row, cellPosition.Column);
      for (int i = 0; i < TicTacToeGame.BoardSize; ++i) {
        for (int j = 0; j < TicTacToeGame.BoardSize; ++j) {
          switch (updatedBoardState[i, j]) {
            case CellState.NormalO:
              _gameCellButtons[i, j].SetImage(UIImage.FromBundle("blueO"), UIControlState.Normal);
              break;
            case CellState.NormalX:
              _gameCellButtons[i, j].SetImage(UIImage.FromBundle("blueX"), UIControlState.Normal);
              break;
            case CellState.WinO:
              _gameCellButtons[i, j].SetImage(UIImage.FromBundle("greenO"), UIControlState.Normal);
              break;
            case CellState.WinX:
              _gameCellButtons[i, j].SetImage(UIImage.FromBundle("greenX"), UIControlState.Normal);
              break;
            default:
              _gameCellButtons[i, j].SetImage(null, UIControlState.Normal);
              break;
          }
        }
      }

      UpdateGameState();
    }

    private void NewGame() {
      _game = new TicTacToeGame();
      for (int i = 0; i < TicTacToeGame.BoardSize; ++i) {
        for (int j = 0; j < TicTacToeGame.BoardSize; ++j) {
          _gameCellButtons[i, j].SetImage(null, UIControlState.Normal);
        }
      }

      UpdateGameState();
    }

    private void UpdateGameState() {
      PlayerOWins.Text = string.Format("player o : {0}", TicTacToeGame.WinCountO);
      PlayerXWins.Text = string.Format("player x : {0}", TicTacToeGame.WinCountX);
      TurnLabel.Text = string.Format("turn : {0}", _game.PlayerTurn == Player.X ? "x" : "o");
    }
  }
}
